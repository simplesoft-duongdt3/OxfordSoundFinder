/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package sound_finder;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import org.apache.commons.io.FileUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form Antenna
     */
    public MainScreen() {
        initComponents();

        rootPane.setDefaultButton(btFindDownload);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtWord = new javax.swing.JTextField();
        btFindDownload = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        btClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Antenna");

        jLabel1.setText("Word");

        btFindDownload.setText("Find & Download");
        btFindDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindDownloadActionPerformed(evt);
            }
        });

        btCancel.setText("Cancel");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        btClear.setText("Clear");
        btClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(btFindDownload)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btCancel))
                    .add(txtWord, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btClear)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {btCancel, btFindDownload}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtWord, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .add(jLabel1)
                    .add(btClear))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btFindDownload)
                    .add(btCancel))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("Find Oxford sounds");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    final String currentFilePath = Paths.get("").toAbsolutePath().toString();

    private void btFindDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindDownloadActionPerformed
        String word = txtWord.getText();
        if (!word.isEmpty()) {
            try {
                Document doc = Jsoup.connect("https://www.oxfordlearnersdictionaries.com/definition/english/" + word).get();

                Element topContainer = doc.getElementsByClass("top-container").first();
                Element soundContainer = topContainer.getElementsByClass("pron-gs ei-g").first();

                Elements sounds = soundContainer.getElementsByClass("pron-g");
                List<SoundInfo> soundsInfos = new ArrayList<SoundInfo>();
                for (Element sound : sounds) {
                    String phonText = null;
                    String soundUrl = null;
                    SoundType soundType = null;
                    Element phon = sound.getElementsByClass("phon").first();
                    if (phon != null) {
                        phonText = phon.text();
                    }

                    Elements ukSounds = sound.getElementsByClass("sound audio_play_button pron-uk icon-audio");
                    Elements usSounds = sound.getElementsByClass("sound audio_play_button pron-us icon-audio");
                    if (!ukSounds.isEmpty()) {
                        soundUrl = ukSounds.first().attr("data-src-mp3");
                        soundType = SoundType.BR;
                    } else if (!usSounds.isEmpty()) {
                        soundUrl = usSounds.first().attr("data-src-mp3");
                        soundType = SoundType.AMERICAN;
                    }
                    if (phonText != null && soundUrl != null && soundType != null) {
                        soundsInfos.add(new SoundInfo(phonText, soundUrl, soundType));
                    }
                }

                if (!soundsInfos.isEmpty()) {
                    startTaskDownloadSound(word, soundsInfos);
                }
            } catch (Exception ex) {
                if (ex instanceof org.jsoup.HttpStatusException) {
                    org.jsoup.HttpStatusException httpStatusException = (org.jsoup.HttpStatusException) ex;
                    if (httpStatusException.getStatusCode() == 404) {
                        JOptionPane.showMessageDialog(MainScreen.this,
                                "Not found '" + word + "' in Oxford.", "Error", ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(MainScreen.this,
                                "Get sounds fail. Network error.", "Error", ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(MainScreen.this,
                                "Get sounds fail.", "Error", ERROR_MESSAGE);
                }
                
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btFindDownloadActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_btCancelActionPerformed

    private void btClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearActionPerformed
        clearTextWord();
    }//GEN-LAST:event_btClearActionPerformed

    private void clearTextWord() {
        txtWord.setText("");
    }
    private void startTaskDownloadSound(final String word, final List<SoundInfo> soundsInfos) {
        SwingWorker swingWorker = new SwingWorker<DownloadSoundInfo, Void>() {
            @Override
            protected DownloadSoundInfo doInBackground() throws Exception {
                return downloadSoundInfo(word, soundsInfos);
            }

            @Override
            protected void done() {
                try {
                    super.done();
                    DownloadSoundInfo downloadSoundInfo = get();
                    if (downloadSoundInfo.isSuccessAll()) {
                        clearTextWord();
                        JOptionPane.showMessageDialog(MainScreen.this,
                                "Download success " + downloadSoundInfo.total + " sounds.");
                    } else {
                        JOptionPane.showMessageDialog(MainScreen.this,
                                "Download success " + downloadSoundInfo.downloaded + "/" + downloadSoundInfo.total + " sounds.");
                    }

                } catch (Exception ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        swingWorker.execute();
    }

    class DownloadSoundInfo {

        private final int total;
        private final int downloaded;
        private final boolean successAll;

        public DownloadSoundInfo(int total, int downloaded, boolean successAll) {
            this.total = total;
            this.downloaded = downloaded;
            this.successAll = successAll;
        }

        public int getTotal() {
            return total;
        }

        public int getDownloaded() {
            return downloaded;
        }

        public boolean isSuccessAll() {
            return successAll;
        }
    }

    private DownloadSoundInfo downloadSoundInfo(String word, List<SoundInfo> soundsInfos) {
        int total = soundsInfos.size();
        int downloaded = 0;
        try {
            File folder = new File(currentFilePath + File.separator + "sounds" + File.separator + word);
            if (folder.exists()) {
                FileUtils.forceDelete(folder);
            }
            StringBuilder soundDescription = new StringBuilder();
            folder.mkdirs();
            int index = 1;
            for (SoundInfo soundsInfo : soundsInfos) {
                try {
                    final File fileSound = new File(getFileName(folder, soundsInfo, index, word));
                    int CONNECTION_TIMEOUT = 30000;
                    int READ_TIMEOUT = 30000;
                    FileUtils.copyURLToFile(new URL(soundsInfo.soundUrl),
                            fileSound,
                            CONNECTION_TIMEOUT,
                            READ_TIMEOUT);
                    downloaded++;
                    soundDescription.append(soundsInfo.phon).append(" ").append(fileSound.getName()).append("\r\n");
                } catch (Exception ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                index++;
            }
            if (soundDescription.length() > 0) {
                File descriptionFile = new File(folder, word + "_description.txt");
                FileUtils.writeStringToFile(descriptionFile, soundDescription.toString(), "utf-8");
            }
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new DownloadSoundInfo(total, downloaded, total == downloaded);
    }

    private String getFileName(File folder, SoundInfo soundsInfo, int index, String word) {
        String type = soundsInfo.getSoundType() == SoundType.AMERICAN ? "NAmE" : "BrE";
        return folder.getPath() + File.separator + word + "_" + type + "_" + index + ".mp3";
    }

    class SoundInfo {

        private final String phon;
        private final String soundUrl;
        private final SoundType soundType;

        public SoundInfo(String phon, String soundUrl, SoundType soundType) {
            this.phon = phon;
            this.soundUrl = soundUrl;
            this.soundType = soundType;
        }

        public String getPhon() {
            return phon;
        }

        public String getSoundUrl() {
            return soundUrl;
        }

        public SoundType getSoundType() {
            return soundType;
        }
    }

    enum SoundType {
        BR, AMERICAN
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            String crossPlatformLookAndFeelClassName = UIManager.getCrossPlatformLookAndFeelClassName();
            javax.swing.UIManager.setLookAndFeel(crossPlatformLookAndFeelClassName);
//            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
//            for (int idx=0; idx<installedLookAndFeels.length; idx++) {
//                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
//                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
//                    break;
//                }
//            }           
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainScreen mainScreen = new MainScreen();
                centeredFrame(mainScreen);
                mainScreen.setResizable(false);
                mainScreen.setVisible(true);
            }
        });
    }

    public static void centeredFrame(javax.swing.JFrame objFrame) {
        Dimension objDimension = Toolkit.getDefaultToolkit().getScreenSize();
        int iCoordX = (objDimension.width - objFrame.getWidth()) / 2;
        int iCoordY = (objDimension.height - objFrame.getHeight()) / 2;
        objFrame.setLocation(iCoordX, iCoordY);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btClear;
    private javax.swing.JButton btFindDownload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtWord;
    // End of variables declaration//GEN-END:variables

}
